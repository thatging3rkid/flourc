package lang.flour.preprocessor;

import java.util.ArrayList;
import java.util.List;
import lang.flour.lexer.Token;

public class Macro {
    private String name;
    private List<Token> params;
    private List<Token> replacement;

    public Macro(String name, List<Token> params, List<Token> replacement) {
        this.name = name;
        this.params = params;
        this.replacement = replacement;
    }

    public Macro(Macro m) {
        this.name = m.getName();
        this.params = m.getParams();
        this.replacement = m.getReplacement();
    }

    public String getName() {
        return this.name;
    }

    public List<Token> getParams() {
        return (this.params == null)? null : new ArrayList<>(this.params);
    }

    public List<Token> getReplacement() {
        return (this.replacement == null)? null : new ArrayList<>(this.replacement);
    }

    public void addParamToken(Token t) {
        if (this.params == null) {
            this.params = new ArrayList<>();
        }
        this.params.add(new Token(t));
    }

    public void addReplacementToken(Token t) {
        if (this.replacement == null) {
            this.replacement = new ArrayList<>();
        }
        this.replacement.add(new Token(t));
    }

    @Override
    public String toString() {
        return "@define " + this.name + " (" + this.params + ") " + this.replacement;
    }

    /**
     * @autogenerated
     * @inherit-doc
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Macro macro = (Macro) o;

        if (name != null ? !name.equals(macro.name) : macro.name != null) {
            return false;
        }
        if (params != null ? !params.equals(macro.params) : macro.params != null) {
            return false;
        }
        return replacement != null ? replacement.equals(macro.replacement)
            : macro.replacement == null;
    }

    /**
     * @autogenerated
     * @inherit-doc
     */
    @Override
    public int hashCode() {
        int result = name != null ? name.hashCode() : 0;
        result = 31 * result + (params != null ? params.hashCode() : 0);
        result = 31 * result + (replacement != null ? replacement.hashCode() : 0);
        return result;
    }
}
